#tag ClassProtected Class FGThumbnailCanvasSuperInherits Canvas	#tag Event		Function MouseDown(X As Integer, Y As Integer) As Boolean		  SelectionRectangle.Width = 0		  SelectionRectangle.Height = 0		  		  // Fire our child's MouseDown event first to see if they want to handle it		  if MouseDown(X,Y) then		    mSelecting = false		    return true		  end if		  		  // Nope - looks like we will...		  SelectionRectangle.Left = X		  SelectionRectangle.Top = Y		  mSelecting = true		  		  return true		  		End Function	#tag EndEvent	#tag Event		Sub MouseDrag(X As Integer, Y As Integer)		  // Draw our selection rectangle if we are selecting		  		  if Selecting then		    SelectionRectangle.Width = x - SelectionRectangle.Left		    SelectionRectangle.Height = y - SelectionRectangle.Top		    HandleSelection()		    Refresh()		  else ' not selecting - fire our child's MouseDrag event		    MouseDrag(X,Y)		  end if		  		End Sub	#tag EndEvent	#tag Event		Sub MouseUp(X As Integer, Y As Integer)		  if abs(SelectionRectangle.Width) > kSelectionThreshold and abs(SelectionRectangle.Height) > kSelectionThreshold then		    if Selecting then HandleSelection()		  end if		  		  // We've stopped selecting		  mSelecting = false		  		  // Refresh to loose the selection rectangle		  Refresh()		  		  // Fire our child's MouseUp event		  MouseUp(x, y)		  		End Sub	#tag EndEvent	#tag Event		Sub Open()		  // Initialise		  SelectionRectangle = new BoundsRectangle		  AcceptFocus = true		  UseFocusRing = false		  		  // Fire our child's Open event		  Open()		  		End Sub	#tag EndEvent	#tag Event		Sub Paint(g As Graphics)		  dim selection as RoundRectShape		  		  // Since FGThumbnailCanvas inherits from us - let it draw the thumbnails first and then we'll draw our selection rectangle over the top		  Update(g)		  		  // Draw the selection rectangle if necessary		  if abs(SelectionRectangle.Width) < kSelectionThreshold or abs(SelectionRectangle.Height) < kSelectionThreshold then return		  		  if Selecting then		    selection = new RoundRectShape		    selection.X = SelectionRectangle.Left + SelectionRectangle.Width/2		    selection.Y = SelectionRectangle.Top + SelectionRectangle.Height/2		    selection.Width = abs(SelectionRectangle.Width)		    selection.Height = abs(SelectionRectangle.Height)		    if selection.Width > 5 then		      selection.CornerWidth = 5		    end if		    if selection.Height > 5 then		      selection.CornerHeight = 5		    end if		    		    // Windows doesn't support opacity		    #if TargetMacOS		      selection.Fill = DragSelectionOpacity		    #else		      selection.Fill = 0		    #endif		    		    selection.FillColor = DragSelectionColor		    		    if DragSelectionBorder > 0 then		      selection.border = 100		      selection.Borderwidth = DragSelectionBorder		      selection.BorderColor = DragSelectionBorderColor		    end if		    		    g.DrawObject(selection)		  end if		  		End Sub	#tag EndEvent	#tag Method, Flags = &h21		Private Sub HandleSelection()		  // Tell FGThumbnailCanvas (which inherits from us) that the selection rectangle has change		  		  dim l, t, w, h as integer		  		  if abs(SelectionRectangle.Width) > kSelectionThreshold and abs(SelectionRectangle.Height) > kSelectionThreshold then		    		    l = min(SelectionRectangle.Left, SelectionRectangle.Left + SelectionRectangle.Width)		    t = min(SelectionRectangle.Top, SelectionRectangle.Top + SelectionRectangle.Height)		    w = abs(SelectionRectangle.Width)		    h = abs(SelectionRectangle.Height)		    		    SelectionChanged(new BoundsRectangle(l, t, w, h))		    		  end if		  		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub Refresh()		  super.Refresh(false)		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Update(ForceUpdate as Boolean = False)		  Update(me.Graphics, ForceUpdate)		  		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub Update(g as Graphics, ForceUpdate as Boolean = False)		  // Fire our children's Paint event		  Paint(g, ForceUpdate)		  		End Sub	#tag EndMethod	#tag Hook, Flags = &h0		Event MouseDown(X as integer, Y as integer) As boolean	#tag EndHook	#tag Hook, Flags = &h0		Event MouseDrag(X as integer, Y as integer)	#tag EndHook	#tag Hook, Flags = &h0		Event MouseUp(X as integer, Y as integer)	#tag EndHook	#tag Hook, Flags = &h0		Event Open()	#tag EndHook	#tag Hook, Flags = &h0		Event Paint(g as Graphics, ForceUpdate as Boolean)	#tag EndHook	#tag Hook, Flags = &h0		Event SelectionChanged(SelectionRectangle as BoundsRectangle)	#tag EndHook	#tag Property, Flags = &h0		DragSelectionBorder As Integer = 2	#tag EndProperty	#tag Property, Flags = &h0		DragSelectionBorderColor As Color = &cFFFFFF	#tag EndProperty	#tag Property, Flags = &h0		DragSelectionColor As Color = &cFFFFFF	#tag EndProperty	#tag Property, Flags = &h0		DragSelectionOpacity As Integer = 30	#tag EndProperty	#tag Property, Flags = &h21		Private mSelecting As Boolean	#tag EndProperty	#tag ComputedProperty, Flags = &h0		#tag Getter			Get			  return mSelecting			End Get		#tag EndGetter		Selecting As Boolean	#tag EndComputedProperty	#tag Property, Flags = &h21		Private SelectionRectangle As BoundsRectangle	#tag EndProperty	#tag Constant, Name = kSelectionThreshold, Type = Double, Dynamic = False, Default = \"2", Scope = Private	#tag EndConstant	#tag ViewBehavior		#tag ViewProperty			Name="AcceptFocus"			Visible=true			Group="Behavior"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="AcceptTabs"			Visible=true			Group="Behavior"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="AutoDeactivate"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Backdrop"			Visible=true			Group="Appearance"			Type="Picture"			EditorType="Picture"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="DoubleBuffer"			Visible=true			Group="Behavior"			InitialValue="False"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="DragSelectionBorder"			Visible=true			Group="Behavior"			InitialValue="2"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="DragSelectionBorderColor"			Visible=true			Group="Behavior"			InitialValue="&cFFFFFF"			Type="Color"		#tag EndViewProperty		#tag ViewProperty			Name="DragSelectionColor"			Visible=true			Group="Behavior"			InitialValue="&cFFFFFF"			Type="Color"		#tag EndViewProperty		#tag ViewProperty			Name="DragSelectionOpacity"			Visible=true			Group="Behavior"			InitialValue="30"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="Enabled"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="EraseBackground"			Visible=true			Group="Behavior"			InitialValue="True"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Height"			Visible=true			Group="Position"			InitialValue="300"			Type="Integer"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="HelpTag"			Visible=true			Group="Appearance"			Type="String"			EditorType="MultiLineEditor"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			Type="Integer"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="InitialParent"			Group="Initial State"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			Type="Integer"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="LockBottom"			Visible=true			Group="Position"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="LockLeft"			Visible=true			Group="Position"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="LockRight"			Visible=true			Group="Position"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="LockTop"			Visible=true			Group="Position"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			Type="String"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Selecting"			Group="Behavior"			Type="Boolean"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="TabIndex"			Visible=true			Group="Position"			InitialValue="0"			Type="Integer"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="TabPanelIndex"			Group="Position"			InitialValue="0"			Type="Integer"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="TabStop"			Visible=true			Group="Position"			InitialValue="True"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			Type="Integer"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="UseFocusRing"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Visible"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Width"			Visible=true			Group="Position"			InitialValue="300"			Type="Integer"			InheritedFrom="Canvas"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass